#include <bits/stdc++.h>
#include "Board.h"
#define s(n) scanf("%d",&n)
#define NW 500

using namespace std;

/* Global Vars - all underscore naming */
int moves_me = 0,moves_opp = 0;
int cut_off = 2;
bool finish_game = false;
Board board;
double w[NW] = {0};
double f[NW] = {0};

float time_left=0;

string maxMove(int p,Board board, float& alpha, float& beta, int level);
string minMove(int p,Board board, float& alpha, float& beta, int level);

inline void initialise(){
	//read the weights
	ifstream f("input.txt");
	for(int i=0;i<NW;i++){
		f >> w[i];
	}
	f.close();

	//init player
	int player_me,board_size;
	cin >> player_me;
	cin >> board_size;
	cin >> time_left;
	time_left -= 2;
	board = Board(board_size,player_me);
	cerr << "Player: "<<board.player_color[0]<<" | board size: "<<board.size<<" | time_limit: "<<time_left<<endl;
	return;
}

inline string parseMove(const string& s, float& num){
	int k=0;
	bool neg = false;
	if(s[0] == '-'){
		neg = true;
		k++;
	}
	string number="";
	while(s[k]!='#'){
		number += s[k];
		k++;
	}
	num = stof(number);
	k++;
	if(neg){
		num = -num;
	}
	string action = "";
	for ( ; k < s.length(); ++k){
		action += s[k];
	}
	return action;
}

inline void placePiece(int p, const string& cmd, Board& board){
	char first_char = cmd[0];
	int pos = (cmd[1] - 'a') * board.size + (cmd[2] - '0' - 1);			// pos => i*n + j-1
    if(first_char == 'C'){
   		board.p_caps[p]--;
   	}else{
   		board.p_flats[p]--;
   	}
   	BoardUnit bu = BoardUnit(board.player_color[p],(first_char=='F')?1:((first_char=='S')?2:3));
	board.addPiece(pos, bu);
	return;
}


inline void moveStack(string& cmd, Board& board){
	int i=0;
	int pieces_to_move = (int)(cmd[i++] - '0');
	
    int posn_alphabet = (int)(cmd[i++] - 'a');
    int posn_numeric = (int)(cmd[i++] - '0' - 1);
    int pos = posn_alphabet * board.size + posn_numeric ;						//position of that piece on board
    char direction = (cmd[i++]);
   
   	if(board.b[pos].size() < pieces_to_move || pieces_to_move > board.size){
    	cerr << "Invalid move: "<<cmd<<endl;
    	return;
    }
    int next = pos;
    int add_next = 0;
    if(direction == '-'){
    	add_next = -1;
    }else if(direction == '+'){
    	add_next = 1;
    }else if(direction == '>'){
    	add_next = board.size;
    }else if(direction == '<'){
    	add_next = -board.size;
    }
	int idx = board.b[pos].size() - pieces_to_move,  num;
	for(int j=0;j<pieces_to_move;j++){
		next += add_next;
		num = (int) (cmd[i++] - '0');
		while(num--){
			if(j == pieces_to_move - 1 && board.b[next].size()>0 && board.b[next].back().kind ==2 ){
				board.b[next].back().kind == 1;		// standing stone will be flattened by thecapstone. Validity of move was already checked before u just need tp flatten 
			}
			board.b[next].push_back(board.b[pos][idx++]);
			j++;
		}
	}
	idx = board.b[pos].size() - pieces_to_move;
	board.b[pos].resize(idx);
	return;
}

inline bool isCorner(int r,int c){
	if(r == 0 && c==0){return true;}
	else if(r == 0 && c== board.size-1){return true;}
	else if(r == board.size-1 && c== 0){return true;}
	else if(r == board.size-1 && c == board.size-1){return true;}
	return false;
}

inline bool isEdge(int r,int c){
	if(r==0 || c==0 || r==board.size-1 || c==board.size-1){return true;}
	return false;
}

float weightedTopStoneCount(Board& board){//returns number of squares owned by me and that by opponent in an array [p_me,p_opp]
    float p_me=0;
    float p_opp = 0;
    float points = 0;
    int pos = 0;
    for(int i = 0; i< board.size; i++){
        for(int j = 0; j<board.size; j++){
        	pos = (i*board.size)+j;
        	if(board.b[pos].size() > 0){ 
        		
        		//weights for corners edges and middle
        		if( isCorner(i,j)) {points = 2;}
        		else if (isEdge(i,j)){points = 3;}
        		else{ points = 4;}
        		
        		//weights for flat,stand and cap
        		// if(board.b[pos].back().kind == 1){ 
        		// 	if(moves_me<3 || moves_me > 8){
        		// 		points += 1.5;	
        		// 	}else{
        		// 		points += 2.5;	
        		// 	}
        		// }else if(board.b[pos].back().kind == 2){		//stading stone 
        		// 	if(moves_me<3 || moves_me >7 ){
        		// 		points += 1.5;	
        		// 	}else{
        		// 		points += 2;	
        		// 	}
        		// }else{
        		// 	if(moves_me > 5){
        		// 		points += 3;	
        		// 	}else{
        		// 		points += 2;	
        		// 	}
        		// }
        		
        		if(board.b[pos].back().color == board.player_color[0]){ p_me += points;}
        		else{ p_opp += points;}
        	}
        }
    }
    return (p_me - p_opp);

}

inline float countStackElements(Board& board,int player,int pos){
	int stack_size = board.b[pos].size(), num=0;
	for (int i = 0; i < stack_size; ++i){
		if(board.b[pos][i].color == board.player_color[player]){
			num++;
		}
	}
	return num;
}

inline float weightedStackSum(Board& board){
        float p_me=0;
        float p_opp = 0;
        float points = 0;
        int pos = 0;
        int num_owned_me=0;
        int num_owned_opp=0;
        for(int i = 0; i< board.size; i++){
            for(int j = 0; j< board.size; j++){
            	pos = (i*board.size)+j;
            	int stack_size = board.b[pos].size();
            	if( stack_size > 0 ){
            		if(board.b[pos].back().color == board.player_color[0]){						//"\n"[0] -> me
            			num_owned_me = countStackElements(board,0,pos);
            			num_owned_opp = countStackElements(board,1,pos);
            			p_me += stack_size * (num_owned_me + num_owned_opp/2);
            		}else{
            			num_owned_me = countStackElements(board,0,pos);
            			num_owned_opp = countStackElements(board,1,pos);
            			p_opp += stack_size * (num_owned_me/2 + num_owned_opp);
            		}
            	}
            }
        }
        
        return (p_me - p_opp);
}

float getMaxChainLengthDiff(Board& board){//returns the length of the maximum length chain of mine and opp's
    float max_me=0,cur_me=0,max_opp=0,cur_opp=0;
    int pos = 0;

    //going along columns
    for(int i = 0; i< board.size; i++){
        for(int j = 0; j< board.size; j++){
            pos = (i*board.size)+j;
            if(j==0){
            	cur_me = cur_opp = 0;
            }
            int stack_size = board.b[pos].size();
            if(stack_size == 0 ){
            	cur_me = 0;
            	cur_opp = 0;
            }else{
            	if(board.b[pos].back().color == board.player_color[0] && board.b[pos].back().kind != 2){
            		cur_me++;
            		cur_opp = 0;
            		max_me = max(max_me,cur_me);
            	}else if(board.b[pos].back().color == board.player_color[1] && board.b[pos].back().kind != 2){
            		cur_me = 0;
            		cur_opp++;
            		max_opp = max(max_opp,cur_opp);
            	}
            }
        }
    }

    for(int j = 0; j< board.size; j++){
        for(int i = 0; i< board.size; i++){
            pos = (i*board.size)+j;
            if(i==0){
            	cur_me = cur_opp = 0;
            }
            int stack_size = board.b[pos].size();
            if(stack_size == 0 ){
            	cur_me = 0;
            	cur_opp = 0;
            }else{
            	if(board.b[pos].back().color == board.player_color[0] && board.b[pos].back().kind != 2){
            		cur_me++;
            		cur_opp = 0;
            		max_me = max(max_me,cur_me);
            	}else if(board.b[pos].back().color == board.player_color[1] && board.b[pos].back().kind != 2){
            		cur_me = 0;
            		cur_opp++;
            		max_opp = max(max_opp,cur_opp);
            	}
            }
        }
    }
    // if(max_opp == board.size && max_me==board.size){ return INT_MAX;}
    if(max_opp == board.size){return INT_MIN;}
    else if(max_me == board.size){return INT_MAX;}
    else if(max_opp == board.size - 1){return -10;}
    else if(max_me == board.size - 1){return 10;}
    // result[0]=max_me;
    // result[1] = max_opp;
    // return result;
    return (max_me-max_opp)*(max_me-max_opp);
}

int longestChain(Board& board,int pos,int p,unordered_set<int> & visited){
	char dir[4] = {'+','-','>','<'};
	int next[4] = {1,-1,board.size,-board.size};	
	int next_pos;
	int maxi = 0;

	visited.insert(pos);
	int r,c;
	r = pos/board.size;
	c = pos%board.size;
	for(int k=0;k<4;k++){
		if(  (c == board.size-1 && k == 0) 	|| (c == 0 && k== 1)  ||  (r == board.size-1 && k==2) ||  (r==0 && k==3) ){
    			continue;
    	}
		next_pos = pos + next[k];
		if( (next_pos>=0 && next_pos< board.area) && visited.find(next_pos) == visited.end() && !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[p]){		
			maxi = max(maxi,1 + longestChain(board,next_pos,p,visited));
		}
	}		
	
	return maxi;
}

bool roadWin(Board& board,int p){
	char dir[4] = {'+','-','>','<'};
    int next[4] = {1,-1, board.size, -board.size};
    int next_pos,pos;
    // check for road wins for me
    unordered_set<int> visited,winning;
    stack<int> dfs;
    //vertical win
    for (int i = 0; i < board.size; ++i){
    	pos = i*board.size;
    	if(!board.b[pos].empty()  &&  board.b[pos].back().color == board.player_color[p]  &&  board.b[pos].back().kind != 2){
    		dfs.push(pos);
    		visited.insert(pos);
    	}
    	winning.insert(pos + board.size - 1);
    }
    int r,c;
    //vertical wins
    while(!dfs.empty()){
    	pos = dfs.top(); 	dfs.pop();
    	if(winning.find(pos) != winning.end()){		//found in winning set
    		return true;
    	}
    	r = pos/board.size;
    	c = pos % board.size;
    	for(int j=0;j<4;j++){
    		if(  (c == board.size-1 && j == 0) 	|| (c == 0 && j== 1)  ||  (r == board.size-1 && j==2) ||  (r==0 && j==3) ){
    			 continue;
    		}
    		next_pos = pos+next[j];
    		if( next_pos >0 && next_pos < board.area  && visited.find(next_pos) == visited.end() 
    				&& !board.b[next_pos].empty() && board.b[next_pos].back().color == board.player_color[p]  
    				&&  board.b[next_pos].back().kind != 2){
    			dfs.push(next_pos);
    			visited.insert(next_pos);
    		}
    	}
    }

    //clearing the sets
    visited.clear(); winning.clear();
    //check for horizontal wins accross numbers
    for (int i = 0; i < board.size; ++i){
    	pos = i;
    	if(!board.b[pos].empty()  &&  board.b[pos].back().color == board.player_color[p]  &&  board.b[pos].back().kind != 2){
    		dfs.push(pos);
    		visited.insert(pos);
    	}
    	winning.insert( board.area - pos - 1);
    }
    while(!dfs.empty()){
    	pos = dfs.top(); 	dfs.pop();
    	if(winning.find(pos) != winning.end()){
    		return true;
    	}
    	r= pos / board.size;
    	c= pos % board.size;
    	for(int j=0;j<4;j++){
    		if(  (c == board.size-1 && j == 0) 	|| (c == 0 && j== 1)  ||  (r == board.size-1 && j==2) ||  (r==0 && j==3) ){
    			continue;
    		}
    		next_pos = pos+next[j];
    		if( next_pos >0 && next_pos < board.area && visited.find(next_pos) == visited.end() && !board.b[next_pos].empty() 
    				&& board.b[next_pos].back().color == board.player_color[p]  &&  board.b[next_pos].back().kind != 2){
    			dfs.push(next_pos);
    			visited.insert(next_pos);
    		}
    	}
    }
    return false;
}


float evaluate(Board& board){
	float result = 0.0;
	int pos=0,next_pos,points;
	int n = 0;

	if(roadWin(board,0)){
		cerr<<"herherhehrehrehrehrerererer21321321321321321321321321321321321321ere"<<endl;
		board.forcePrintBoard();
		result = INT_MAX;
		return result;
	}else if(roadWin(board,1)){
		cerr<<"herherhehrehrehrehrererererere"<<endl;
		board.forcePrintBoard();
		result = INT_MIN;
		return result;
	}

	for(int i=0;i<22;i++){
		f[i] = 0;
	}


	char dir[4] = {'+','-','>','<'};
	int next[4] = {1,-1,board.size,-board.size};

// f[0] -> my flats;	f[1] -> opp_flats;
//f[2] -> mycap exists;	f[3]->mycap near my flats;	f[4]-> mycap near my stands;	f[5]->mycap near opp flats; f[6]->mycap opp stand
//f[7] -> oppcap exists;	f[8]->oppcap near opp flats;	f[9]-> oppcap near opp stands;	f[10]->oppcap near my flats; f[11]->oppcap my stand
//f[12] -> my stands;	f[13]-> opp stands;
//f[14]-> my max chain;	f[15]->opp max chain;
//f[16]-> mystacksize*myplayers;	f[17]->oppstacksize*oppplayers
//f[18]->my weighted top points;	f[19]->opp weighted top points
//f[20]->y remaining flats;			f[21]->opp remaining flats

	//my flats+cap on top	
	// flat count and capstone near pieces of same or differnt colors
	for (int i = 0; i < board.size; ++i){
		for (int j = 0; j < board.size; ++j){
			pos = i*board.size + j;
			//count flats			
			if(!board.b[pos].empty() && board.b[pos].back().color == board.player_color[0] && board.b[pos].back().kind != 2 ){
				f[0]++;
			}else if(!board.b[pos].empty() && board.b[pos].back().color == board.player_color[1] && board.b[pos].back().kind != 2 ){
				f[1]++;
			}

			//my capstone
			if(!board.b[pos].empty() && board.b[pos].back().color == board.player_color[0] && board.b[pos].back().kind == 3 ){
				f[2]++;

				//capstone near other pieces of same color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){
						continue;
					}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[0]){
						f[3]++;
					}
				}
	
				//capstone near other pieces of opposite color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){
						continue;
					}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[1]){
						f[4]++;
					}
				}
				
				//capstone near other walls of same color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){
						continue;
					}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[0] && board.b[next_pos].back().kind == 2){
						f[5]++;
					}
				}
				
				//capstone near other walls of opp color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){
						continue;
					}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[1] && board.b[next_pos].back().kind == 2){
						f[6]++;
					}
				}
			}

			//opp capstone
			if(!board.b[pos].empty() && board.b[pos].back().color == board.player_color[0] && board.b[pos].back().kind == 3 ){
				f[7]++;

				//capstone near other pieces of same color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){continue;}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[1]){
						f[8]++;
					}
				}
	
				//capstone near other pieces of opposite color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){continue;}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[0]){
						f[9]++;
					}
				}
				
				//capstone near other walls of same color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){continue;}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[1] && board.b[next_pos].back().kind == 2){
						f[10]++;
					}
				}
				
				//capstone near other walls of opp color
				for(int k=0;k<4;k++){
					if( (j==board.size-1 && k==0) || (j==0 && k==1) || (i==board.size-1 && k==2) || (i==0 && k==3)){continue;}
					next_pos = pos+next[k];
					if(  !board.b[next_pos].empty()  && board.b[next_pos].back().color == board.player_color[0] && board.b[next_pos].back().kind == 2){
						f[11]++;
					}
				}
			}

			if(!board.b[pos].empty() && board.b[pos].back().color == board.player_color[0] && board.b[pos].back().kind == 2 ){
				f[12]++;
			}else if(!board.b[pos].empty() && board.b[pos].back().color == board.player_color[1] && board.b[pos].back().kind == 2 ){
				f[13]++;
			}

			if(!board.b[pos].empty()){
				if( isCorner(i,j)) {points = 2;}
        		else if (isEdge(i,j)){points = 3;}
        		else{ points = 4;}
        		if(board.b[pos].back().color == board.player_color[0]){
        			f[18]+=points;
        		}else{
        			f[19] += points;
        		}
			}
		}
	}

	int max_length = 0;
	unordered_set<int> visited;
	// max chain length for me
	for(int i=0;i<board.size;i++){
		for(int j=0;j<board.size;j++){
			pos = i*board.size + j;
			max_length = max(max_length,longestChain(board,pos,0,visited));		//longestChain(board,position,player,visited)
		}	
	}
	visited.clear();
	f[14] = max_length;

	result += f[n++];
	// max chain length for opp
	for(int i=0;i<board.size;i++){
		for(int j=0;j<board.size;j++){
			pos = i*board.size + j;
			max_length = max(max_length,longestChain(board,pos,1,visited));		//longestChain(board,length,position,player)
		}	
	}
	f[15] = max_length;				//w[11] -> maxlength opp
	
	//Controlling bigger stacks
	int num_owned_me=0, num_owned_opp=0;
    int num_stacks_me=0, num_stacks_opp=0;
    for(int i = 0; i< board.size; i++){
        for(int j = 0; j< board.size; j++){
        	pos = (i*board.size)+j;
        	int stack_size = board.b[pos].size();
        	if( stack_size > 0 ){
        		num_owned_me = countStackElements(board,0,pos);
        		num_owned_opp = countStackElements(board,1,pos);
        		if(board.b[pos].back().color == board.player_color[0]){				//f[12] =  stacks owned by me
        			f[16] += (stack_size+1) * (num_owned_me - num_owned_opp/4);

        		}else{
        			f[17] += (stack_size+1) * (-num_owned_me/4 + num_owned_opp);			//f[12] =  stacks owned by opponent
        		}
        	}
        }
    }
    f[20] = board.p_flats[0];
    f[21] = board.p_flats[1];

	for(int i=0;i<22;i++){
		result += w[i]*f[i];	
	}

	
	
	
	// cerr<<"Evaluation Started#############"<<endl;

	// result += weightedTopStoneCount(board);
	// result += board.p_flats[1] - board.p_flats[0];
	// cerr<<" Part22222: Evaluation Started#############"<<endl;
	// result += weightedStackSum(board);
	// cerr<<" Part233333: Evaluation Started#############"<<endl;
	// result += getMaxChainLengthDiff(board);
	// cerr<<" DONE Evaluation #############"<<endl;
	// for (int i = 1; i < num_players; ++i){
		// result -= (this.getStackHeight(i)+this.getOwnedSquares(i)+this.getMaxChainLength(i));
	// }
    return result;
}

int sumDigits(int num){
	int sum = 0;
	// int tmp=0;
	while(num!=0){
		sum += num%10;
		num /=10;
	}
	return sum;
}

int numDigits(int num){
	int n=0;
	while(num!=0){
		n++;
		num/=10;
	}
	return n;
}

vector<int> partition(int num){
	vector <int> part_list;
	vector<int> part_smaller;

	part_list.push_back(num);
	for(int i=1;i<num;i++){
		part_smaller = partition(num-i);
		for(int j=0;j < part_smaller.size();j++){
			part_list.push_back( i*pow(10,numDigits(part_smaller[j])) + part_smaller[j]);
		}
	}
	return part_list;
}



bool checkValid(Board& board,int pos,char dir,int part){
	int add_next=0;
	if(dir=='<'){
		add_next = -board.size;
	}else if(dir == '>'){
		add_next = board.size;
	}else if(dir == '+'){
		add_next = 1;
	}else{
		add_next = -1;
	}
	int next = pos;
	while(part!=0){
		next += add_next;

		if(board.b[next].size()>0 && board.b[next].back().kind == 3){		//capstone found
			return false;
		}else if(board.b[next].size()>0 && board.b[next].back().kind == 2 && part/10 != 0){		//standing stone and moving stack beyond that
			return false;
		}else if(part/10 == 0 && board.b[next].size()>0 && board.b[next].back().kind == 2 && part > 1){		//standing stone and moving more than one size stack
			return false;
		}else if(part/10 == 0 && board.b[next].size()>0 && board.b[next].back().kind == 2 && part > 1){		//standing stone and moving more than one size stack
			return false;
		}else if(part/10 == 0 && board.b[next].size()>0 && board.b[next].back().kind == 2 && board.b[pos].back().kind != 3){		//standing stone and moving more than one size stack
			return false;
		}
		part/=10;
	}
	return true;
}

vector<string> generateStackMoves(Board& board,int pos){
	int r = pos / board.size, c = pos % board.size;
	int ups = r, downs = board.size - r - 1;
	int lefts = c, rights = board.size - c - 1;
	int stack_size = min( ((int) board.size) , (int)board.b[pos].size());
	// cerr<<"stack_size: "<<stack_size<<endl;

	char dir[4] = {'+','-','<','>'};			// + corresponds to right; - to left; < to up; > to down
	int rem_squares[4] = {0};
	rem_squares[0] = rights;
	rem_squares[1] = lefts;
	rem_squares[2] = ups;
	rem_squares[3] = downs;
	vector<int> part_list,part_dir;
	vector<string> all_moves;
	for(int i=1; i<= stack_size; i++){
		part_list.clear();
		part_list = partition(i);
		for (int j = 0; j < 4; ++j){
			part_dir.clear();
			for (int k = 0; k < part_list.size(); ++k){
				if(numDigits(part_list[k]) <= rem_squares[j]){
					part_dir.push_back(part_list[k]);
				}
			}
			for(int k=0;k<part_dir.size();k++){
				if( checkValid(board,pos,dir[j],part_dir[k])){
					all_moves.push_back(to_string(sumDigits(part_dir[k]))+ ((char) (r+'a')) + ((char) (c+'1')) + dir[j] + to_string(part_dir[k]));
				}
			}
		}
	}
	
	return all_moves;
}

vector<string> generateMoves(Board& board,int player){
	vector <string> all_moves;
	int pos=0;
	string tmp_move="";
	
	// cerr<<"Generalting all moves::::::::::::::::"<<endl;
	vector<string> stack_moves;
	if(board.p_flats[player] > 0 || board.p_caps[player] > 0){
		for (int i = 0; i < board.size; ++i){
			for (int j = 0; j < board.size; ++j){
				pos = i*board.size + j;
				
				//placing moves
				if(board.b[pos].size() == 0 ){	
					tmp_move = ((char) (i + 97)) + to_string(j+1);
					if(board.p_flats[player]>0){
						all_moves.push_back("F"+tmp_move);
						all_moves.push_back("S"+tmp_move);	
					}
					if(board.p_caps[player] > 0){
						all_moves.push_back("C"+tmp_move);
					}
				}
			}
		}
	}

	// cerr<<"yoyoyo"<<endl;
	for (int i = 0; i < board.size; ++i){
		for (int j = 0; j < board.size; ++j){
		//other moveStack moves			
			pos = i*board.size + j;
			if(board.b[pos].size()>0 && board.b[pos].back().color == board.player_color[player]){
				stack_moves = generateStackMoves(board,pos);
				if(stack_moves.size()>0){
					all_moves.insert(all_moves.end(), stack_moves.begin(),stack_moves.end());
				}
			}
		}
	}
	

	// cerr<<"All available moves are: ";
	// for (int i = 0; i < all_moves.size(); ++i){
	// 	cerr<<all_moves[i]<<", ";
	// }
	// cerr<<endl;
	return all_moves;
}

string minMove(int p,Board board, float& alpha, float& beta, int level){
	
	// cerr<<"Doing a MIN move at level: "<<level<<endl;
	if(level>=cut_off){
		float heuristic = evaluate(board);
		// cerr<<"Heuristic: "<<cost<<endl;
		// return cost;
		return to_string(heuristic)+"#";
	}

	float value = INT_MAX;

	// FOR ACTIONS
	string starred_move = "";
	string action_a_level_down="";
	string s = "";
	Board board_try = board; 

	float maxi = 0;
	vector<string> moves = generateMoves(board_try,p);
	string cmd;


	// board_try.printBoard();
	// cerr<<"All available moves are FOR MIN MOVE AT level: "<<level<<" |  :  ";
	// for (int i = 0; i < moves.size(); ++i){
	// 	cerr<<moves[i]<<", ";
	// }
	// cerr<<endl;

	for (int i = 0; i < moves.size(); ++i){
		cmd = moves[i];
		board_try = board;
		// cerr<<"################"<<endl;
		// board_try.printBoard();
		// cerr<<"MIN move at level: "<<level<<" : cmd: "<<cmd<<endl;
		// cerr<<"MIN: Move: "<<cmd<<endl;
		// board_try.printBoard();
		if(cmd[0] == 'F' || cmd[0] == 'S' || cmd[0] == 'C'){
			placePiece(p,cmd,board_try);
		}else{
			moveStack(cmd,board_try);
		}

		s = maxMove(1-p,board_try,alpha,beta,level+1);
		maxi = 0;
		action_a_level_down = parseMove(s,maxi);

		if(maxi < value){			//findinf minimum
			value = maxi;
			starred_move = cmd;
		}
		if(alpha >= value){return (to_string(value)+"#"+starred_move);}
		beta = min(beta,value);
	}
	// return value;
	return (to_string(value)+"#"+starred_move);
}


string maxMove(int p,Board board, float& alpha, float& beta, int level){
	
	
	if(level>=cut_off){
		float heuristic = evaluate(board);
		// cerr<<"Heuristic: "<<cost<<endl;
		return to_string(heuristic)+"#";
	}

	float value = INT_MIN;

	// FOR ACTIONS
	string starred_move = "";
	string action_a_level_down="";
	string s = "";

	Board board_try = board; 	

	float mini = 0;
	vector<string> moves = generateMoves(board_try,p);
	string cmd;

	// board_try.printBoard();
	// cerr<<"All available moves are FOR MAXXXXX MOVE AT level: "<<level<<" |  :  ";
	// for (int i = 0; i < moves.size(); ++i){
	// 	cerr<<moves[i]<<", ";
	// }
	// cerr<<endl;

	for (int i = 0; i < moves.size(); ++i){
		cmd = moves[i];
		board_try = board;
		// cerr<<"################"<<endl;
		// board_try.printBoard();
		// cerr<<"Tyring MAX move at level: "<<level<<" : cmd: "<<cmd<<endl;
		// cerr<<"MAXAX: Move: "<<cmd<<endl;
		// board_try.printBoard();
		if(cmd[0] == 'F' || cmd[0] == 'S' || cmd[0] == 'C'){
			placePiece(p,cmd,board_try);
		}else{
			moveStack(cmd,board_try);
		}

		s = minMove(1-p,board_try,alpha,beta,level+1);
		mini = 0;
		action_a_level_down = parseMove(s,mini);

		if(mini > value){
			value = mini;
			starred_move = cmd;
		}
		if(value >= beta){return (to_string(value)+"#"+starred_move);}
		alpha = max(alpha,value);
	}

	return (to_string(value)+"#"+starred_move);
	// return value;
}

string doMove(Board& board,int level){

	// if(moves_me <= 5) {
	// 	cut_off = 2;
	// }
	// else {
		
		
	//  	if(time_left >= 80){
	//  		cut_off = 4;
	//  	}else if(time_left >= 45){
	//  		cut_off = 3;
	//  	}
	//  	else if(time_left >= 15) {
	//  		cut_off = 2;
	//  	}
	//  	else{
	//  		cut_off = 1;
	//  	}
	//  }

	// cerr<<"#############Planning a Move#############"<<endl;
	string cmd;
	int player = 0;
	if(moves_me == 0){
		player = 1;
		if(board.b[0].size()==0){
			cmd="Fa1";
		}else{
			cmd="Fe1";
		}
		cerr<<"First opp piece placed: "<<cmd<<endl;
		placePiece(player,cmd,board);		
        board.printBoard();	
        moves_me ++;
        return cmd;
	}
	float alpha = INT_MIN;
	float beta = INT_MAX;
	string action;
	
	
	
	// time_t move_start = time(0);
	
	action = maxMove(player,board,alpha,beta,level);				// maxMove(player,board,alpha,beta,level)	

	// time_t move_end = time(0);
	// time_passed += difftime(move_end, move_start);

	// time_left = time_limit - float( clock () - begin_time ) /  CLOCKS_PER_SEC;
	// cerr<<"Time Left: "<<time_left<<endl;
	

	float value = 0;
	action = parseMove(action,value);
	
	cmd = action;
	cerr<<"My Move: "<<cmd<<endl;	
	
	if(cmd[0] =='F' || cmd[0] =='S' || cmd[0] == 'C'){				//means that opponent has played a "place a stone"
        placePiece(player,cmd,board);		
        board.printBoard();	
    }else{									
   		moveStack(cmd,board);				
        board.printBoard();
    }
	
	
	moves_me ++;
	return action;
}

int main(){

    initialise();
    board.b[0].push_back(BoardUnit(1,1));
    board.b[1].push_back(BoardUnit(1,1));
    board.b[2].push_back(BoardUnit(1,3));
    board.b[3].push_back(BoardUnit(1,1));
    board.b[4].push_back(BoardUnit(1,3));
    board.b[5].push_back(BoardUnit(1,3));
    board.printBoard();
    cerr<<roadWin(board,1);
/*
	// clock_t time_move_start = clock();
	time_t time_move_start = time(0);
	float time_move;
	// Game Loop 
	string cmd;
	if(board.player_color[0] == 1){			// if i am player 1 i do a move
		cmd = doMove(board,0);		
		// time_move = float(clock() - time_move_start)/CLOCKS_PER_SEC;
		time_move = difftime(time(0),time_move_start);
		time_left -= time_move;
		cerr<<"time lefttttt:  "<<time_left<<endl;
		cout<<cmd<<endl;	
	}

	int player = 0;
	while(true){
		if(finish_game){
			break;
		}

		cin >> cmd;
		time_move_start = time(0);		
		// if moves ==0 then first move from opp will move my piece
		if(moves_opp==0){
			player=0;
		}else{
			player=1;
		}
		cerr<<"Opponent's Move: "<<cmd<<endl;		
        if(cmd[0] =='F' || cmd[0]=='S' || cmd[0] =='C'){				//means that opponent has played a "place a stone"
            placePiece(player,cmd,board);		//1 -> opponent		// placepiece(player,cmd,board)
            board.printBoard();	
        }
        else{										//means that opp has played "move a stack", assuming the correct format of input here
       		moveStack(cmd,board);					// moveStack(cmd,board)
            board.printBoard();
        }
        moves_opp++;


        
		cmd = doMove(board,0);	
		// time_move = float(clock() - time_move_start) / CLOCKS_PER_SEC;
		time_move = difftime(time(0),time_move_start);
		time_left -= time_move;
		cerr<<"time LEFTTTTT:::: "<<time_left<<endl; 
		cout<<cmd<<endl;	

	}
*/
	return 0;
}
